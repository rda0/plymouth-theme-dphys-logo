#  ubuntu-logo.script - boot splash plugin
# 
#  Copyright (C) 2009 Canonical Ltd.
#  Copyright (C) 2018 Sven Mäder
# 
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2, or (at your option)
#  any later version.
# 
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
# 
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
#  02111-1307, USA.
# 
#  Written by: Alberto Milone <alberto.milone@canonical.com>
#
#  Based on the example provided with the "script plugin" written by:
#              Charlie Brej   <cbrej@cs.man.ac.uk>
#
#  Question stuff written by: Markus Waas <mail@markuswaas.de>
#
#  DPHYS stuff written by: Sven Mäder <maeder@phys.ethz.ch>
#

# Set the text colour in (rgb / 256)
text_colour.red = 1.0;
text_colour.green = 1.0;
text_colour.blue = 1.0;

# Tinted text - (message text color)
tinted_text_colour.red = 1.0;
tinted_text_colour.green = 1.0;
tinted_text_colour.blue = 1.0;

# Action Text - #ffffff - RGB 255 255 255
action_text_colour.red = 1.0;
action_text_colour.green = 1.0;
action_text_colour.blue = 1.0;

# Orange - #ff4012 - RGB 255 64 18
debugsprite = Sprite();
debugsprite_bottom = Sprite();
debugsprite_medium = Sprite();

# Ubuntu Font
ubuntufont = "DINPro-Bold, Ubuntu, sans-serif 14";
ubuntualignment = "center";


# are we currently prompting for a password?
prompt_active = 0;

# General purpose function to create text
fun WriteText (text, colour) {
    image = Image.Text (text, colour.red, colour.green, colour.blue, color.alpha, ubuntufont, ubuntualignment);
    return image;
}

fun ImageToText (text) {
    image = WriteText (text, text_colour);
    return image;
}

fun ImageToTintedText (text) {
    image = WriteText (text, tinted_text_colour);
    return image;
}

fun ImageToActionText (text) {
    image = WriteText (text, action_text_colour);
    return image;
}

fun Debug(text) {
    debugsprite.SetImage(ImageToText (text));
}

fun DebugBottom(text) {
    debugsprite_bottom.SetImage(ImageToText (text));
    debugsprite_bottom.SetPosition(0, (Window.GetHeight (0) - 20), 1);
}

fun DebugMedium(text) {
    debugsprite_medium.SetImage(ImageToText (text));
    debugsprite_medium.SetPosition(0, (Window.GetHeight (0) - 60), 1);
}

fun TextYOffset() {
    local.y;
    local.text_height;
    local.min_height;

    # Put the 1st line below the logo + some spacing 
    y = logo.y + logo.height + (progress_indicator.bullet_height * 7.0 ); # + logo_spacing;

    text_height = first_line_height * 7.5;

    min_height = Window.GetHeight();
    if (y + text_height > min_height)
        y = min_height - text_height;

    if (y < progress_indicator.y + progress_indicator.height)
        return progress_indicator.y + progress_indicator.height;
    return y;
}

#------------------------------String functions-------------------------------

# This is the equivalent for strstr()
fun StringString(string, substring) {
    start = 0;
    while (String(string).CharAt (start)) {
        walk = 0;
        while (String(substring).CharAt (walk) == String(string).CharAt (start + walk) ) {
            walk++;
            if (!String(substring).CharAt (walk)) return start;
        }
        start++;
    }
    
    return NULL;
}

fun StringLength (string) {
    index = 0;
    while (String(string).CharAt(index)) index++;
    return index;
}

fun StringCopy (source, beginning, end) {
    local.destination = "";
    for (index = beginning; ( ( (end == NULL) || (index <= end) ) && (String(source).CharAt(index)) ); index++) {
        local.destination += String(source).CharAt(index);
    }
    
    return local.destination;
}

fun StringReplace (source, pattern, replacement) {
    local.found = StringString(source, pattern);
    if (local.found == NULL)
        return source;

    local.new_string = StringCopy (source, 0, local.found - 1) +
                       replacement +
                       StringCopy (source, local.found + StringLength(pattern), NULL);

    return local.new_string;
}

# it makes sense to use it only for numbers up to 100
fun StringToInteger (str) {
    int = -1;
    for (i=0; i<=100; i++) {
        if (i+"" == str) {
            int = i;
            break;
        }
    }
    return int;
}

#-----------------------------------------------------------------------------
Window.SetBackgroundTopColor (0.00, 0.00, 0.00);     # Nice colour on top of the screen fading to
Window.SetBackgroundBottomColor (0.00, 0.00, 0.00);  # an equally nice colour on the bottom

#bits_per_pixel = Window.GetBitsPerPixel ();

logo_filename = "logo_installing_software.png";
logo_left_filename = "logo_dphys.png";
logo_right_filename = "logo_eth.png";
black_pixel_filename = "black_pixel.png";
logo_org_filename = "logo_org.png";
background_filename = "background.png";
progress_dot_off_filename = "progress-dot-transparent.png";
progress_dot_on_filename = "progress-dot-off.png";
password_field_filename = "password-field.png";
question_field_filename = "password-field.png";

background.source_image = Image(background_filename);
background.image = background.source_image.Scale(Window.GetWidth(), Window.GetHeight());
background.sprite = Sprite();
background.sprite.SetImage(background.image);
background.width = background.image.GetWidth();
background.height = background.image.GetHeight();
background.x = Window.GetX() + ( Window.GetWidth() - background.width ) / 2;
background.y = Window.GetY() + ( Window.GetHeight() - background.height ) / 2;
background.z = 0;
background.sprite.SetX(background.x);
background.sprite.SetY(background.y);
background.sprite.SetZ(background.z);
background.sprite.SetOpacity (1);

black.source_image = Image(black_pixel_filename);
panel.image = black.source_image.Scale(800, 450);
panel.sprite = Sprite();
panel.sprite.SetImage(panel.image);
panel.width = panel.image.GetWidth();
panel.height = panel.image.GetHeight();
panel.x = Window.GetX() + ( Window.GetWidth() - panel.width ) / 2;
panel.y = Window.GetY() + ( Window.GetHeight() - panel.height ) / 2;
panel.z = 10;
panel.sprite.SetX (panel.x);
panel.sprite.SetY (panel.y);
panel.sprite.SetZ (panel.z);
panel.sprite.SetOpacity (0.65);

logo.image = Image(logo_filename);
logo.sprite = Sprite();
logo.sprite.SetImage(logo.image);
logo.width = logo.image.GetWidth();
logo.height = logo.image.GetHeight();
logo.x = Window.GetX() + Window.GetWidth() / 2 - logo.width  / 2;
logo.y = panel.y + panel.height / 4 - logo.height / 2;
logo.z = 1000;
logo.sprite.SetX(logo.x);
logo.sprite.SetY(logo.y);
logo.sprite.SetZ(logo.z);
logo.sprite.SetOpacity (1);

# Spacing below the logo - in pixels
logo_spacing = logo.height * 4;

logo_left.image = Image(logo_left_filename);
logo_left.sprite = Sprite();
logo_left.sprite.SetImage(logo_left.image);
logo_left.width = logo_left.image.GetWidth();
logo_left.height = logo_left.image.GetHeight();
logo_left.x = panel.x + 60;
logo_left.y = panel.y + panel.height - logo_left.height - 60;
logo_left.z = 1001;
logo_left.sprite.SetX(logo_left.x);
logo_left.sprite.SetY(logo_left.y);
logo_left.sprite.SetZ(logo_left.z);
logo_left.sprite.SetOpacity (0.85);

logo_right_source_image = Image(logo_right_filename);
logo_right.image = logo_right_source_image.Scale(130, 21);
logo_right.sprite = Sprite();
logo_right.sprite.SetImage(logo_right.image);
logo_right.width = logo_right.image.GetWidth();
logo_right.height = logo_right.image.GetHeight();
logo_right.x = ( panel.x + panel.width ) - ( logo_right.width + 60 );
logo_right.y = panel.y + panel.height - logo_right.height - 60;
logo_right.z = 1002;
logo_right.sprite.SetX(logo_right.x);
logo_right.sprite.SetY(logo_right.y);
logo_right.sprite.SetZ(logo_right.z);
logo_right.sprite.SetOpacity (0.85);

message_notification[0].image = ImageToTintedText ("");
message_notification[1].image = ImageToTintedText ("");
fsck_notification.image = ImageToActionText ("");

status = "normal";

progress_indicator.bullet_off = Image (progress_dot_off_filename);
progress_indicator.bullet_on = Image (progress_dot_on_filename);
progress_indicator.bullet_width = progress_indicator.bullet_off.GetWidth ();
progress_indicator.bullet_height = progress_indicator.bullet_off.GetHeight ();
progress_indicator.bullet_hspacing = progress_indicator.bullet_width * 1.1;
progress_indicator.width = progress_indicator.bullet_width * 5;
progress_indicator.height = progress_indicator.bullet_height;
progress_indicator.x = Window.GetX() + ( Window.GetWidth() - progress_indicator.width ) / 2;
progress_indicator.y = Window.GetY() + ( Window.GetHeight() - progress_indicator.height ) / 2;

# use a fixed string with ascending and descending stems to calibrate the
# bounding box for the first message, so the messages below don't move up
# and down according to *their* height.
first_line_height = ImageToTintedText ("AfpqtM").GetHeight();

# if the user has a 640x480 or 800x600 display, we can't quite fit everything
# (including passphrase prompts) with the target spacing, so scoot the text up
# a bit if needed.
top_of_the_text = TextYOffset();

#-----------------------------------------Logo functions------------------------------

# Call this when updating the screen
fun draw_logo () {
    logo.sprite.SetX (logo.x);
    logo.sprite.SetY (logo.y);
    logo.sprite.SetZ (logo.z);
    logo.sprite.SetOpacity (1);
}


#-----------------------------------------Progress Indicator--------------------------
fun set_progress_indicator () {
    
    
    # Here we assume that we can store half bullets on each half of the screen
    # together with some spacing
    local.x = progress_indicator.x;
    
    for (index = 0; index <= 4; index++) {
        # Set the "off" bullets
        progress_indicator.bullets_off[index].sprite = Sprite (progress_indicator.bullet_off);
        progress_indicator.bullets_off[index].sprite.SetPosition (local.x, progress_indicator.y, 1000);
        progress_indicator.bullets_off[index].x = local.x;
        progress_indicator.bullets_off[index].y = progress_indicator.y;
        progress_indicator.bullets_off[index].sprite.SetOpacity (1);
        
        # Set the "on" bullets on top of the "off" bullets and make them transparent
        progress_indicator.bullets_on[index].sprite = Sprite (progress_indicator.bullet_on);
        progress_indicator.bullets_on[index].x = progress_indicator.bullets_off[index].x;
        progress_indicator.bullets_on[index].y = progress_indicator.bullets_off[index].y;
        progress_indicator.bullets_on[index].sprite.SetPosition (progress_indicator.bullets_on[index].x, progress_indicator.bullets_on[index].y, 10000);

        progress_indicator.bullets_on[index].sprite.SetOpacity (0);
        
        local.x += progress_indicator.bullet_hspacing;
    }
}


# We have 2 bullets, one on top of the other:
# The white one is on top of the red one and the former should
# slowly fade so as to get a nice transition effect.
fun switch_on_bullet (bullets_off, bullets_on, bullet_number, opacity) {
    local.x = bullets_on[bullet_number].x;
    local.y = bullets_on[bullet_number].y;
    local.z = bullets_on[bullet_number].z;
    
    # Hide the bullets which are off
    bullets_off[bullet_number].sprite.SetOpacity (0);
    
    # Show the bullets which are on
    bullets_on[bullet_number].sprite.SetPosition (local.x, local.y, local.z);
    bullets_on[bullet_number].sprite.SetOpacity (opacity);
    
    # Bump the number of times we have switched on bullets
    global.times_bullets_switched++;
}

fun switch_off_bullets () {
    set_progress_indicator ();
    global.times_bullets_switched = 0;
    global.on_off = 1;
}

# This is something that we can call when we exit
fun switch_on_bullets () {
    if (!global.progress_indicator.bullets_on) set_progress_indicator ();
    local = global.progress_indicator;

    for (index = 0; bullets_on[index]; index++) {
        switch_on_bullet (bullets_off, bullets_on, index, 1.0);
    }
}


# Implement in boot progress callback
fun animate_progress_indicator (progress, time) {
    if (global.progress_time == NULL) {
        global.progress_time = progress;  #time;
        switch_off_bullets ();
    }

    if ((progress - global.progress_time) >= 1.0) {
        global.progress_time = progress;
        
        if (global.times_bullets_switched == 5) {
            # Change which bullets are switched on and which ones are switched off
            global.on_off = !global.on_off;
            global.times_bullets_switched = 0;
        }
        
        if (global.on_off) {
            switch_on_bullet (progress_indicator.bullets_off, progress_indicator.bullets_on,
                              global.times_bullets_switched, 1.0);
        }
        else {
            switch_on_bullet (progress_indicator.bullets_on, progress_indicator.bullets_off,
                              global.times_bullets_switched, 1.0);
        }
    }
}

Plymouth.SetBootProgressFunction (animate_progress_indicator);


#-----------------------------------------Label utility functions---------------------

# label should be either a string or NULL
# Images for n lines will be created and returned as items of the
# message_label array
#
fun get_message_label (label, is_fake, is_action_line) {
    local.message_label;
    
    if (is_fake)
        # Create a fake label so as to get the y coordinate of a standard-length label.
        local.message_image = ImageToTintedText ("This is a fake message");
    else
        local.message_image = (is_action_line) && ImageToActionText (label) || ImageToTintedText (label);
        
    message_label.width = message_image.GetWidth ();
    message_label.height = message_image.GetHeight ();

    # Center the line horizontally
    message_label.x = Window.GetX () + Window.GetWidth () / 2 - message_label.width / 2;

    message_label.y = top_of_the_text;

    # Put the 2nd line below the fsck line
    if (is_action_line) {
        local.fsck_label.y = message_label.y + (first_line_height + first_line_height / 2);
        message_label.y = local.fsck_label.y + (first_line_height * 2);
    }

    return message_label;
}


#-----------------------------------------Message stuff --------------------------------
#

# Set up a message label
#
# NOTE: this is called when doing something like 'plymouth message "hello world"'
#
fun setup_message (message_text, x, y, z, index) {
    global.message_notification[index].image = (index) && ImageToActionText (message_text) || ImageToTintedText (message_text);

    # Set up the text message, if any
    message_notification[index].x = x;
    message_notification[index].y = y;
    message_notification[index].z = z;
    
    message_notification[index].sprite = Sprite ();
    message_notification[index].sprite.SetImage (message_notification[index].image);
    message_notification[index].sprite.SetX (message_notification[index].x);
    message_notification[index].sprite.SetY (message_notification[index].y);
    message_notification[index].sprite.SetZ (message_notification[index].z);
}

fun show_message (index) {
    if (global.message_notification[index].sprite) global.message_notification[index].sprite.SetOpacity(1);
}

fun hide_message (index) {
    if (global.message_notification[index].sprite) global.message_notification[index].sprite.SetOpacity(0);
}


# the callback function is called when new message should be displayed.
# First arg is message to display.
fun message_callback (message)
{
    is_fake = 0;
    if (!message || (message == "")) is_fake = 1;
    
    local.substring = "keys:";
    
    # Look for the "keys:" prefix
    local.keys = StringString(message, local.substring);
    
    local.is_action_line = (keys != NULL);

    # Get the message without the "keys:" prefix
    if (keys != NULL)
        message = StringCopy (message, keys + StringLength(local.substring), NULL);

    # Get the message without the "fsckd-cancel-msg" prefix as we don't support i18n
    substring = "fsckd-cancel-msg:";
    keys = StringString(message, substring);
    if (keys != NULL)
        message = StringCopy(message, keys + StringLength(substring), NULL);

    local.label.is_fake = is_fake;
    label = get_message_label(message, is_fake, is_action_line);
    label.z = 10000;
    
    setup_message (message, label.x, label.y, label.z, is_action_line);
    if (prompt_active && local.is_action_line)
        hide_message (is_action_line);
    else
        show_message (is_action_line);

}

Plymouth.SetMessageFunction (message_callback);


#-----------------------------------------Update Status stuff --------------------------
#
# The update_status_callback is what we can use to pass plymouth whatever we want so
# as to make use of features which are available only in this program (as opposed to
# being available for any theme for the script plugin).
#
# Example:
#
#   Thanks to the current implementation, some scripts can call "plymouth --update=fsck:sda1:40"
#   and this program will know that 1) we're performing and fsck check, 2) we're checking sda1,
#   3) the program should set the label progress to 40%
#
# Other features can be easily added by parsing the string that we pass plymouth with "--update"
#
fun update_status_callback (status) {
    if (!status) return;
    
    string_it = 0;
    update_strings[string_it] = "";
    
    for (i=0; (String(status).CharAt(i) != ""); i++) {
        local.temp_char = String(status).CharAt(i);
        if (temp_char != ":")
            update_strings[string_it] += temp_char;
        else
            update_strings[++string_it] = "";
    }
    
    # Let's assume that we're dealing with these strings fsck:sda1:40
    if ((string_it >= 2) && (update_strings[0] == "fsck")) {
        
        device = update_strings[1];
        progress = update_strings[2];
        status_string[0] = update_strings[3]; # "Checking disk %1$d of %2$d (%3$d %% complete)"
        if (!status_string[0])
            status_string[0] = "Checking disk %1$d of %2$d (%3$d %% complete)";
        
        if ((device != "") && (progress != "")) {
            progress = StringToInteger (progress);
        
            # Make sure that the fsck_queue is initialised
            if (!global.fsck_queue)
                init_queue ();

            # Make sure that the fsck counter is initialised
            if (!global.counter)
                init_fsck_count ();

            # Keep track of the fsck check
            fsck_check (device, progress, status_string);
        }
        
    }

    if (update_strings[0] == "fsckd") {
        number_devices = StringToInteger(update_strings[1]);

        if (number_devices > 0) {
            label = update_strings[3];

            progress_label = get_fsck_label (label, 0);
            progress_label.sprite = Sprite (progress_label.image);
            progress_label.sprite.SetPosition(progress_label.x, progress_label.y, 1);
            progress_label.sprite.SetOpacity (1);
        } else {
            if (progress_label.sprite)
                progress_label.sprite.SetOpacity (0);
        }
    }

}

Plymouth.SetUpdateStatusFunction (update_status_callback); 


#-----------------------------------------Refresh stuff --------------------------------
#
# Calling Plymouth.SetRefreshFunction with a function will set that function to be
# called up to 50 times every second, e.g.
#
# NOTE: if a refresh function is not set, Plymouth doesn't seem to be able to update
#       the screen correctly
#
fun refresh_callback ()
{
    draw_logo ();
}

Plymouth.SetRefreshFunction (refresh_callback);


#----------------------------------------- Quit --------------------------------
#
# Show the logo and make the progress indicator look full when on exit
fun quit_callback ()
{
    logo.sprite.SetOpacity (1);
    switch_on_bullets (); 
}

Plymouth.SetQuitFunction(quit_callback);
