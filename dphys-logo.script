#  dphys-install-logo.script - boot splash plugin
# 
#  Copyright (C) 2009 Canonical Ltd.
#  Copyright (C) 2018 Sven Mäder
# 
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2, or (at your option)
#  any later version.
# 
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
# 
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
#  02111-1307, USA.
# 
#  Written by: Alberto Milone <alberto.milone@canonical.com>
#
#  Based on the example provided with the "script plugin" written by:
#              Charlie Brej   <cbrej@cs.man.ac.uk>
#
#  Question stuff written by: Markus Waas <mail@markuswaas.de>
#
#  DPHYS stuff written by: Sven Mäder <maeder@phys.ethz.ch>
#

# Set the text colour in (rgb / 256)
text_color.red = 1.0;
text_color.green = 1.0;
text_color.blue = 1.0;
text_color.alpha = 1.0;

log_color.red = 1.0;
log_color.green = 1.0;
log_color.blue = 1.0;
log_color.alpha = 0.8;

error_color.red = 1.0;
error_color.green = 0.0;
error_color.blue = 0.17;
error_color.alpha = 0.8;

# Font style
message_style.font = "DINPro-Bold, Rubik Medium, Ubuntu, sans-serif 14";
message_style.align = "center";

status_style.font = "DINPro-Medium, Rubik, Ubuntu, sans-serif 30";
status_style.align = "center";

log_style.font = "Ubuntu Mono, monospace 10";
log_style.align = "left";

# are we currently prompting for a password?
prompt_active = 0;

# General purpose function to create text
fun Write (text, color, style) {
    image = Image.Text (text, color.red, color.green, color.blue, color.alpha, style.font, style.align);
    return image;
}

fun WriteText (text) {
    image = Write (text, text_color, message_style);
    return image;
}

fun WriteStatus (text) {
    image = Write (text, text_color, status_style);
    return image;
}

fun WriteLog (text) {
    image = Write (text, log_color, log_style);
    return image;
}

fun WriteError (text) {
    image = Write (text, error_color, log_style);
    return image;
}


#------------------------------String functions-------------------------------

# This is the equivalent for strstr()
fun StringString(string, substring) {
    start = 0;
    while (String(string).CharAt (start)) {
        walk = 0;
        while (String(substring).CharAt (walk) == String(string).CharAt (start + walk) ) {
            walk++;
            if (!String(substring).CharAt (walk)) return start;
        }
        start++;
    }
    
    return NULL;
}

fun StringLength (string) {
    index = 0;
    while (String(string).CharAt(index)) index++;
    return index;
}

fun StringCopy (source, beginning, end) {
    local.destination = "";
    for (index = beginning; ( ( (end == NULL) || (index <= end) ) && (String(source).CharAt(index)) ); index++) {
        local.destination += String(source).CharAt(index);
    }
    
    return local.destination;
}

fun StringReplace (source, pattern, replacement) {
    local.found = StringString(source, pattern);
    if (local.found == NULL)
        return source;

    local.new_string = StringCopy (source, 0, local.found - 1) +
                       replacement +
                       StringCopy (source, local.found + StringLength(pattern), NULL);

    return local.new_string;
}

# it makes sense to use it only for numbers up to 100
fun StringToInteger (str) {
    int = -1;
    for (i=0; i<=100; i++) {
        if (i+"" == str) {
            int = i;
            break;
        }
    }
    return int;
}

#-----------------------------------------------------------------------------
Window.SetBackgroundTopColor (0.00, 0.00, 0.00);     # Nice colour on top of the screen fading to
Window.SetBackgroundBottomColor (0.00, 0.00, 0.00);  # an equally nice colour on the bottom

#bits_per_pixel = Window.GetBitsPerPixel ();

#logo_filename = "logo_installing_software.png";
logo_left_filename = "logo_dphys.png";
logo_right_filename = "logo_eth.png";
black_pixel_filename = "black_pixel.png";
background_filename = "background.png";
progress_dot_off_filename = "progress-dot-transparent.png";
progress_dot_on_filename = "progress-dot-off.png";
password_field_filename = "password-field.png";
question_field_filename = "password-field.png";

background.source_image = Image(background_filename);
background.image = background.source_image.Scale(Window.GetWidth(), Window.GetHeight());
background.sprite = Sprite();
background.sprite.SetImage(background.image);
background.width = background.image.GetWidth();
background.height = background.image.GetHeight();
background.x = Window.GetX() + ( Window.GetWidth() - background.width ) / 2;
background.y = Window.GetY() + ( Window.GetHeight() - background.height ) / 2;
background.z = 0;
background.sprite.SetX(background.x);
background.sprite.SetY(background.y);
background.sprite.SetZ(background.z);
background.sprite.SetOpacity (1);

black.source_image = Image(black_pixel_filename);
panel.image = black.source_image.Scale(800, 450);
panel.sprite = Sprite();
panel.sprite.SetImage(panel.image);
panel.width = panel.image.GetWidth();
panel.height = panel.image.GetHeight();
panel.x = Window.GetX() + ( Window.GetWidth() - panel.width ) / 2;
panel.y = Window.GetY() + ( Window.GetHeight() - panel.height ) / 2;
panel.z = 500;
panel.sprite.SetX (panel.x);
panel.sprite.SetY (panel.y);
panel.sprite.SetZ (panel.z);
panel.sprite.SetOpacity (0.65);

logo_left.image = Image(logo_left_filename);
logo_left.sprite = Sprite();
logo_left.sprite.SetImage(logo_left.image);
logo_left.width = logo_left.image.GetWidth();
logo_left.height = logo_left.image.GetHeight();
logo_left.x = panel.x + 60;
logo_left.y = panel.y + panel.height - logo_left.height - 60;
logo_left.z = 1001;
logo_left.sprite.SetX(logo_left.x);
logo_left.sprite.SetY(logo_left.y);
logo_left.sprite.SetZ(logo_left.z);
logo_left.sprite.SetOpacity (0.85);

logo_right_source_image = Image(logo_right_filename);
logo_right.image = logo_right_source_image.Scale(130, 21);
logo_right.sprite = Sprite();
logo_right.sprite.SetImage(logo_right.image);
logo_right.width = logo_right.image.GetWidth();
logo_right.height = logo_right.image.GetHeight();
logo_right.x = ( panel.x + panel.width ) - ( logo_right.width + 60 );
logo_right.y = panel.y + panel.height - logo_right.height - 60;
logo_right.z = 1002;
logo_right.sprite.SetX(logo_right.x);
logo_right.sprite.SetY(logo_right.y);
logo_right.sprite.SetZ(logo_right.z);
logo_right.sprite.SetOpacity (0.85);

status = "normal";

progress_indicator.bullet_off = Image (progress_dot_off_filename);
progress_indicator.bullet_on = Image (progress_dot_on_filename);
progress_indicator.bullet_width = progress_indicator.bullet_off.GetWidth ();
progress_indicator.bullet_height = progress_indicator.bullet_off.GetHeight ();
progress_indicator.bullet_hspacing = progress_indicator.bullet_width * 1.1;
progress_indicator.width = progress_indicator.bullet_width * 5;
progress_indicator.height = progress_indicator.bullet_height;
progress_indicator.x = Window.GetX() + ( Window.GetWidth() - progress_indicator.width ) / 2;
progress_indicator.y = Window.GetY() + ( Window.GetHeight() - progress_indicator.height ) / 2;

# use a fixed string with ascending and descending stems to calibrate the
# bounding box for the first message, so the messages below don't move up
# and down according to *their* height.
first_line_height = WriteText ("AfpqtM").GetHeight();
log_line_height = WriteLog ("AfpqtM").GetHeight();

message_notification.image = WriteText ("");
status_notification.image = WriteStatus ("");


#-----------------------------------------Log functions-------------------------------

# Initializing log sprites to full screen height
screen_width = Window.GetWidth();
screen_height = Window.GetHeight();
log_line_spacing = 13;
log_line_numbers = 0;
more_lines = 1;
i = 0;

while (more_lines) {
    log_pos_y = 10 + (i * log_line_spacing);
    if (log_pos_y > (screen_height - log_line_spacing - 10)) {
        more_lines = 0;
        log_line_numbers = i;
    }
    else {
        lines[i]= WriteLog("");
        message_sprite[i] = Sprite();
        message_sprite[i].SetPosition(10, log_pos_y, 100);
        i++;
    }
}

# write a log line to the bottom of the screen and shift up
fun log(text, color) {
   # Shift message one up
   for (i = 0; i < log_line_numbers - 1; i++) {
     lines[i] = lines[i+1];
   }

   # Create the image for the latest message
   lines[i] = Write(text, color, log_style);

   # Re-positioning the text images
   for (i = 0; i < log_line_numbers; i++) {
     message_sprite[i].SetImage(lines[i]);
   }
}


#-----------------------------------------Logo functions------------------------------

# Call this when updating the screen
fun draw_logo () {
}


#-----------------------------------------Progress Indicator--------------------------
fun set_progress_indicator () {
    # Here we assume that we can store half bullets on each half of the screen
    # together with some spacing
    local.x = progress_indicator.x;
    
    for (index = 0; index <= 4; index++) {
        # Set the "off" bullets
        progress_indicator.bullets_off[index].sprite = Sprite (progress_indicator.bullet_off);
        progress_indicator.bullets_off[index].sprite.SetPosition (local.x, progress_indicator.y, 1000);
        progress_indicator.bullets_off[index].x = local.x;
        progress_indicator.bullets_off[index].y = progress_indicator.y;
        progress_indicator.bullets_off[index].sprite.SetOpacity (1);
        
        # Set the "on" bullets on top of the "off" bullets and make them transparent
        progress_indicator.bullets_on[index].sprite = Sprite (progress_indicator.bullet_on);
        progress_indicator.bullets_on[index].x = progress_indicator.bullets_off[index].x;
        progress_indicator.bullets_on[index].y = progress_indicator.bullets_off[index].y;
        progress_indicator.bullets_on[index].sprite.SetPosition (progress_indicator.bullets_on[index].x, progress_indicator.bullets_on[index].y, 10000);

        progress_indicator.bullets_on[index].sprite.SetOpacity (0);
        
        local.x += progress_indicator.bullet_hspacing;
    }
}


# We have 2 bullets, one on top of the other:
# The white one is on top of the red one and the former should
# slowly fade so as to get a nice transition effect.
fun switch_on_bullet (bullets_off, bullets_on, bullet_number, opacity) {
    local.x = bullets_on[bullet_number].x;
    local.y = bullets_on[bullet_number].y;
    local.z = bullets_on[bullet_number].z;
    
    # Hide the bullets which are off
    bullets_off[bullet_number].sprite.SetOpacity (0);
    
    # Show the bullets which are on
    bullets_on[bullet_number].sprite.SetPosition (local.x, local.y, local.z);
    bullets_on[bullet_number].sprite.SetOpacity (opacity);
    
    # Bump the number of times we have switched on bullets
    global.times_bullets_switched++;
}

fun switch_off_bullets () {
    set_progress_indicator ();
    global.times_bullets_switched = 0;
    global.on_off = 1;
}

# This is something that we can call when we exit
fun switch_on_bullets () {
    if (!global.progress_indicator.bullets_on) set_progress_indicator ();
    local = global.progress_indicator;

    for (index = 0; bullets_on[index]; index++) {
        switch_on_bullet (bullets_off, bullets_on, index, 1.0);
    }
}


# Implement in boot progress callback
fun animate_progress_indicator (progress, time) {
    if (global.progress_time == NULL) {
        global.progress_time = progress;  #time;
        switch_off_bullets ();
    }

    if ((progress - global.progress_time) >= 1.0) {
        global.progress_time = progress;
        
        if (global.times_bullets_switched == 5) {
            # Change which bullets are switched on and which ones are switched off
            global.on_off = !global.on_off;
            global.times_bullets_switched = 0;
        }
        
        if (global.on_off) {
            switch_on_bullet (progress_indicator.bullets_off, progress_indicator.bullets_on,
                              global.times_bullets_switched, 1.0);
        }
        else {
            switch_on_bullet (progress_indicator.bullets_on, progress_indicator.bullets_off,
                              global.times_bullets_switched, 1.0);
        }
    }
}

Plymouth.SetBootProgressFunction (animate_progress_indicator);


#-----------------------------------------Label utility functions---------------------

fun get_message_label (label, is_fake) {
    local.message_label;
    
    if (is_fake)
        local.message_image = WriteText ("This is a fake message");
    else
        local.message_image = WriteText (label);
        
    message_label.width = message_image.GetWidth ();
    message_label.height = message_image.GetHeight ();
    message_label.x = Window.GetX () + Window.GetWidth () / 2 - message_label.width / 2;
    message_label.y = Window.GetY () + Window.GetHeight () / 2 - message_label.height / 2 + 70;

    return message_label;
}

fun get_status_label (label, is_fake) {
    local.status_label;

    if (is_fake)
        status_label.image = WriteStatus ("This is a fake message");
    else
        status_label.image = WriteStatus (label);

    status_label.width = status_label.image.GetWidth ();
    status_label.height = status_label.image.GetHeight ();
    status_label.x = Window.GetX () + Window.GetWidth () / 2 - status_label.width / 2;
    status_label.y = Window.GetY () + Window.GetHeight () / 2 - status_label.height / 2 - 120;

    return status_label;
}


#-----------------------------------------Message stuff --------------------------------

fun setup_message (message_text, x, y, z) {
    global.message_notification.image = WriteText (message_text);
    message_notification.x = x;
    message_notification.y = y;
    message_notification.z = z;
    message_notification.sprite = Sprite ();
    message_notification.sprite.SetImage (message_notification.image);
    message_notification.sprite.SetX (message_notification.x);
    message_notification.sprite.SetY (message_notification.y);
    message_notification.sprite.SetZ (message_notification.z);
    global.message_notification.sprite.SetOpacity(1)
}

# the callback function is called when new message should be displayed.
fun message_callback (message)
{
    is_fake = 0;
    if (!message || (message == "")) is_fake = 1;
    
    local.label.is_fake = is_fake;
    label = get_message_label(message, is_fake);
    label.z = 10000;
    
    setup_message (message, label.x, label.y, label.z);
}

Plymouth.SetMessageFunction (message_callback);


#-----------------------------------------Update Status stuff --------------------------

fun setup_status (status_text, x, y, z) {
    global.status_notification.image = WriteStatus (status_text);
    status_notification.x = x;
    status_notification.y = y;
    status_notification.z = z;
    status_notification.sprite = Sprite ();
    status_notification.sprite.SetImage (status_notification.image);
    status_notification.sprite.SetX (status_notification.x);
    status_notification.sprite.SetY (status_notification.y);
    status_notification.sprite.SetZ (status_notification.z);
    status_notification.sprite.SetOpacity(1);
}

fun update_status_callback (status) {
    if (!status) return;
    
    string_it = 0;
    update_strings[string_it] = "";
    
    for (i=0; (String(status).CharAt(i) != ""); i++) {
        local.temp_char = String(status).CharAt(i);
        if (temp_char != ":") {
            update_strings[string_it] += temp_char;
        }
        else {
            if (string_it < 1) {
                update_strings[++string_it] = "";
            }
            else {
                update_strings[string_it] += temp_char;
            }
        }
    }
    
    if (update_strings[0] == "log") {
        log(update_strings[1], log_color);
    }

    if (update_strings[0] == "error") {
        log(update_strings[1], error_color);
    }

    if (update_strings[0] == "title") {
        title = update_strings[1];
        title_label = get_status_label (title, 0);
        title_label.z = 10000;
        setup_status (title, title_label.x, title_label.y, title_label.z);
    }
}

Plymouth.SetUpdateStatusFunction (update_status_callback); 


fun keyboard_input_callback(key) {
    log("key pressed: " + key);
}

Plymouth.SetKeyboardInputFunction(keyboard_input_callback);


#-----------------------------------------Refresh stuff --------------------------------
#
# Calling Plymouth.SetRefreshFunction with a function will set that function to be
# called up to 50 times every second, e.g.
#
# NOTE: if a refresh function is not set, Plymouth doesn't seem to be able to update
#       the screen correctly
#
fun refresh_callback ()
{
    #draw_logo ();
}

Plymouth.SetRefreshFunction (refresh_callback);


#----------------------------------------- Quit --------------------------------
#
# Show the logo and make the progress indicator look full when on exit
fun quit_callback ()
{
    logo.sprite.SetOpacity (1);
    switch_on_bullets (); 
}

Plymouth.SetQuitFunction(quit_callback);
